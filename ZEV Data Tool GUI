from tkinter import *

root = Tk()  # create root window
root.title("ZEV Data Tool")  # title of the GUI window
root.geometry("1200x800")  # specify size of the window
root.config(bg="black")  # specify background color
root.columnconfigure(0, weight=1)  # specify column
root.columnconfigure(1, weight=1)  # specify column
root.columnconfigure(2, weight=1)  # specify column
root.columnconfigure(3, weight=1)  # specify column
root.columnconfigure(4, weight=1)  # specify column
root.columnconfigure(5, weight=1)  # specify column
root.rowconfigure(0, weight=1)  # specify row
root.rowconfigure(1, weight=1)  # specify row
root.rowconfigure(2, weight=1)  # specify row
root.rowconfigure(3, weight=1)  # specify row

# Signal Plot Frame
signal_plot_frame = Frame(root, bg='cyan')
signal_plot_frame.grid(row=0, column=0, rowspan=3,
                       columnspan=3, sticky='nsew', padx=5, pady=5)
# add title to signal_plot_frame

# add image to signal_plot_frame
image = PhotoImage(file="graph.gif")
Label(signal_plot_frame, image=image).grid()

# Signals in Selected File Frame
signals_in_selected_file_frame = Frame(root, bg='lime')
signals_in_selected_file_frame.grid(row=0, column=3, rowspan=3,
                                    columnspan=1, sticky='nsew', padx=5, pady=5)

# add title to signals_in_selected_file_frame
label2 = Label(signals_in_selected_file_frame, text="Signals in Selected File")
label2.grid(row=0, padx=5, pady=5)

# Create label
label = Label(signals_in_selected_file_frame,
              text="What signals do you want to include?")
label.grid(row=1)

# make a funcntion to print the selected signal


def print_signal():
    if time.get() == 1:
        print("Time signal is selected.")
    elif time.get() == 0:
        print("Time signal is NOT selected.")
    if acceleration.get() == 1:
        print("Acceleration signal is selected.")
    elif acceleration.get() == 0:
        print("Acceleration signal is NOT selected.")
    if velocity.get() == 1:
        print("Velocity signal is selected.")
    elif velocity.get() == 0:
        print("Velocity signal is NOT selected.")
    if torque.get() == 1:
        print("Torque signal is selected.")
    elif torque.get() == 0:
        print("Torque signal is NOT selected.")


# add checkboxes to signals_in_selected_file_frame
time = IntVar()
Checkbutton(signals_in_selected_file_frame, width=25, text="Time [s]",
            variable=time, bg="green").grid(row=2)

acceleration = IntVar()
Checkbutton(signals_in_selected_file_frame, width=25, text="Accel [m/s^2]",
            variable=acceleration, bg="yellow").grid(row=3)

velocity = IntVar()
Checkbutton(signals_in_selected_file_frame, width=25, text="Velocity [m/s]",
            variable=velocity, bg="orange").grid(row=4)

torque = IntVar()
Checkbutton(signals_in_selected_file_frame, width=25, text="torque [Nm]",
            variable=torque, bg="red").grid(row=5)

print_signal()

# File Select Frame
file_select_frame = Frame(root, bg='magenta')
file_select_frame.grid(row=0, column=4, rowspan=3, columnspan=2,
                       sticky='nsew', padx=5, pady=5)
# add title to file_select_frame
label3 = Label(file_select_frame, text="File Select")
label3.pack()
# add buttons to file_select_frame
# vehicle_select_button = Button(file_select_frame, text="Select Vehicle")
# vehicle_select_button.pack()
# test_select_button = Button(file_select_frame, text="Select Test")
# test_select_button.pack()
# data_source_select_button = Button(
#     file_select_frame, text="Select Data Source")
# data_source_select_button.pack()
# sample_select_button = Button(file_select_frame, text="Select Sample")
# sample_select_button.pack()
# load_data_button = Button(file_select_frame, text="Load Data")
# load_data_button.pack()

# add drop-down menu for vehicle selection


def select_vehicle():
    label.config(text=clicked.get())


# Dropdown menu options
options = [
    "2AIRJR294",
    "2F150EVJR886",
    "2HUMMEVJR686",
    "2MODXJR336",
]
# datatype of menu text
clicked = StringVar()
# initial menu text
clicked.set("Select Vehicle")
# Create Dropdown menu
drop = OptionMenu(file_select_frame, clicked, *options)
drop.pack()

# add drop-down menu for test selection


def select_test():
    label.config(text=clicked.get())


# Dropdown menu options
options = [
    "001",
    "002",
    "003",
    "004",
]
# datatype of menu text
clicked = StringVar()
# initial menu text
clicked.set("Select Test")
# Create Dropdown menu
drop = OptionMenu(file_select_frame, clicked, *options)
drop.pack()

# add drop-down menu for data source


def select_vehicle():
    label.config(text=clicked.get())


# Dropdown menu options
options = [
    "DYNO",
    "CAN",
    "NRX",
    "OBD",
]
# datatype of menu text
clicked = StringVar()
# initial menu text
clicked.set("Select Data Source")
# Create Dropdown menu
drop = OptionMenu(file_select_frame, clicked, *options)
drop.pack()

# Create button, it will change label text
load_data_button = Button(file_select_frame, text="Load Data",
                          command=select_vehicle).pack()

# Filter Frame
filter_frame = Frame(root, bg='orange')
filter_frame.grid(row=3, column=0, rowspan=1, columnspan=2,
                  sticky='nsew', padx=5, pady=5)
# add title to filter_frame
label4 = Label(filter_frame, text="Filter")
label4.grid(row=0, column=0, padx=5, pady=5)
# add grid to filter_frame
filter_frame.columnconfigure(0, weight=1)  # specify column
filter_frame.columnconfigure(1, weight=1)  # specify column
filter_frame.rowconfigure(0, weight=1)  # specify row
filter_frame.rowconfigure(1, weight=1)  # specify row
# add buttons to filter_frame
filter_selected_signal_button = Button(
    filter_frame, text="Filter Selected Signal")
filter_selected_signal_button.grid(row=0, column=0, padx=5, pady=5)
# add user input boxes to filter_frame
filter_input_frame = Frame(filter_frame, bg='blue')  # create frame
filter_input_frame.grid(row=1, column=0, rowspan=1,
                        columnspan=1, sticky='nsew', padx=5, pady=5)  # add frame to filter_frame
f_label = Label(filter_input_frame, text="f: ")  # add label to frame
f_label.grid(row=0, column=0, padx=5, pady=5)  # add label to frame
f = Entry(filter_input_frame, exportselection=0,
          textvariable=StringVar)  # add entry box to frame
f.grid(row=0, column=1, padx=5, pady=5)
order_label = Label(filter_input_frame, text="Order: ")
order_label.grid(row=1, column=0, padx=5, pady=5)
order = Entry(filter_input_frame, exportselection=0, textvariable=StringVar)
order.grid(row=1, column=1, padx=5, pady=5)
# add buttons to filter_frame
add_to_signal_group_button = Button(
    filter_frame, text="Add to Current Signal Group")
add_to_signal_group_button.grid(row=0, rowspan=2, column=1, padx=5, pady=5)

# Signal Group Selection Frame
signal_group_selection_frame = Frame(root, bg='pink')
signal_group_selection_frame.grid(row=3, column=2, rowspan=1,
                                  columnspan=2, sticky='nsew', padx=5, pady=5)
# add title to signal_group_selection_frame
label6 = Label(signal_group_selection_frame, text="Signal Group Selection")
label6.grid(row=0, column=0, padx=5, pady=5)

# Log Frame
log_frame = Frame(root, bg='lavender')
log_frame.grid(row=3, column=4, rowspan=1, columnspan=2,
               sticky='nsew', padx=5, pady=5)
# add title to log_frame
# label7 = Label(log_frame, text="Log")
# label7.grid(row=0, column=0, padx=5, pady=5)
# Create text widget and specify size.
T = Text(log_frame, height=5, width=52)

# Create label
l = Label(log_frame, text="Console Log: ")

Fact = '"[Running] python3 "/Users/sandraconnors/python-gui-tutorials/ZEV Data Tool GUI" 2023-10-14 20:37:37.723 Python[31731:2725243] WARNING: Secure coding is not enabled for restorable state! Enable secure coding by implementing NSApplicationDelegate.applicationSupportsSecureRestorableState: and returning YES.'

l.pack()
T.pack()

# Insert The Fact.
T.insert(END, Fact)

root.mainloop()
