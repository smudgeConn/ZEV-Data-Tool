import tkinter as tk
from tkinter import ttk
import csv


def LaunchGUI():
    root = tk.Tk()  # create root window
    root.title("ZEV Data Tool")  # title of the GUI window
    root.geometry("1200x800")  # specify size of the window
    root.config(bg="black")  # specify background color

    # Configure the grid of the root window
    def grid_configure(rows, columns):

        for column in range(columns):
            root.columnconfigure(column, weight=1)
        for row in range(rows):
            root.rowconfigure(row, weight=1)
    grid = grid_configure(4, 6)

    # Create frames
    def create_sig_plot():
        signal_plot_frame = tk.Frame(root, bg='cyan')
        signal_plot_frame.grid(row=0, column=0, rowspan=3,
                               columnspan=2, sticky='nsew', padx=5, pady=5)
        sig_plot_label = tk.Label(signal_plot_frame, text="Signal Plot")
        sig_plot_label.pack()
        return signal_plot_frame
    sig_plot = create_sig_plot()

    def create_sigs_in_file():
        sigs_in_file = tk.Frame(root, bg='lime')
        sigs_in_file.grid(row=0, column=2, rowspan=3,
                          columnspan=2, sticky='nsew', padx=5, pady=5)
        sigs_in_file_label = tk.Label(
            sigs_in_file, text="Signals in Selected File")
        sigs_in_file_label.pack()
        listbox = tk.Checkbutton(sigs_in_file, text="test")
        listbox.pack()
        listbox1 = tk.Checkbutton(sigs_in_file, text="test")
        listbox1.pack()
        listbox2 = tk.Checkbutton(sigs_in_file, text="test")
        listbox2.pack()
        return sigs_in_file
    sigs_in_file = create_sigs_in_file()

    def create_file_select():
        file_select = tk.Frame(root, bg="magenta")
        file_select.grid(row=0, column=4, rowspan=3,
                         columnspan=2, sticky='nsew', padx=5, pady=5)
        return file_select
    file_select = create_file_select()

    def create_filter():
        filter = tk.Frame(root, bg="orange")
        filter.grid(row=3, column=0, rowspan=1,
                    columnspan=2, sticky='nsew', padx=5, pady=5)
        return filter
    filter = create_filter()

    def filter_options():
        filter_button = tk.Button(filter, text="Filter")
        filter_button.grid(row=0, column=0, padx=5, pady=5)
        add_to_group_button = tk.Button(filter, text="Add to Group")
        add_to_group_button.grid(row=0, column=1, padx=5, pady=5)
        
# Helpful resource for OptionMenu:
# https://www.geeksforgeeks.org/tkinter-optionmenu-widget/#

    def file_select_OptionMenus():
        with open("vehicle-list.txt", "r") as vehicle_file, open("test-list.txt", "r") as test_file, open("data-source-list.txt", "r") as data_source_file, open("sample-list.txt", "r") as sample_file:
            vehicles = list(csv.reader(vehicle_file))
            tests = list(csv.reader(test_file))
            data_sources = list(csv.reader(data_source_file))
            samples = list(csv.reader(sample_file))
        value_inside = tk.StringVar(file_select)

        # Vehicle Selection Menu
        value_inside.set("Select Vehicle")
        vehicle_option_menu = tk.OptionMenu(
            file_select, value_inside, *vehicles)
        vehicle_option_menu.grid(row=0, column=0, padx=5, pady=5)

        # Test Selection Menu
        value_inside2 = tk.StringVar(file_select)
        value_inside2.set("Select Test")
        test_selection_menu = tk.OptionMenu(
            file_select, value_inside2, *tests)
        test_selection_menu.grid(row=1, column=0, padx=5, pady=5)

        # Data Source Selection Menu
        value_inside3 = tk.StringVar(file_select)
        value_inside3.set("Select Data Source")
        data_source_menu = tk.OptionMenu(
            file_select, value_inside3, *data_sources)
        data_source_menu.grid(row=2, column=0, padx=5, pady=5)

        # Sample Selection Menu
        value_inside4 = tk.StringVar(file_select)
        value_inside4.set("Select Data Source")
        sample_menu = tk.OptionMenu(
            file_select, value_inside4, *samples)
        sample_menu.grid(row=3, column=0, padx=5, pady=5)
    file_select_OptionMenus = file_select_OptionMenus()

# make a funcntion to print the selected signal

# def print_signal():
#     if time.get() == 1:
#         print("Time signal is selected.")
#     elif time.get() == 0:
#         print("Time signal is NOT selected.")
#     if acceleration.get() == 1:
#         print("Acceleration signal is selected.")
#     elif acceleration.get() == 0:
#         print("Acceleration signal is NOT selected.")
#     if velocity.get() == 1:
#         print("Velocity signal is selected.")
#     elif velocity.get() == 0:
#         print("Velocity signal is NOT selected.")
#     if torque.get() == 1:
#         print("Torque signal is selected.")
#     elif torque.get() == 0:
#         print("Torque signal is NOT selected.")

# # add checkboxes to sigs_in_file
# time = tk.IntVar()
# tk.Checkbutton(sigs_in_file, width=25, text="Time [s]",
#                variable=time, bg="green").grid(row=2)

# acceleration = tk.IntVar()
# tk.Checkbutton(sigs_in_file, width=25, text="Accel [m/s^2]",
#                variable=acceleration, bg="yellow").grid(row=3)

# velocity = tk.IntVar()
# tk.Checkbutton(sigs_in_file, width=25, text="Velocity [m/s]",
#                variable=velocity, bg="orange").grid(row=4)

# torque = tk.IntVar()
# tk.Checkbutton(sigs_in_file, width=25, text="torque [Nm]",
#                variable=torque, bg="red").grid(row=5)

# print_signal()


# # Signal Group Selection Frame
# signal_group_selection_frame = tk.Frame(root, bg='pink')
# signal_group_selection_frame.grid(row=3, column=2, rowspan=1,
#                                   columnspan=2, sticky='nsew', padx=5, pady=5)
# # add title to signal_group_selection_frame
# label6 = tk.Label(signal_group_selection_frame,
#                   text="Signal Group Selection")
# label6.grid(row=0, column=0, padx=5, pady=5)

# # Log Frame
# log_frame = tk.Frame(root, bg='lavender')
# log_frame.grid(row=3, column=4, rowspan=1, columnspan=2,
#                sticky='nsew', padx=5, pady=5)
# # add title to log_frame
# # label7 = tk.Label(log_frame, text="Log")
# # label7.grid(row=0, column=0, padx=5, pady=5)
# # Create text widget and specify size.
# T = tk.Text(log_frame, height=5, width=52)

# # Create label
# l = tk.Label(log_frame, text="Console Log: ")

# Fact = '"[Running] python3 "/Users/sandraconnors/python-gui-tutorials/ZEV Data Tool GUI" 2023-10-14 20:37:37.723 Python[31731:2725243] WARNING: Secure coding is not enabled for restorable state! Enable secure coding by implementing NSApplicationDelegate.applicationSupportsSecureRestorableState: and returning YES.'

# l.pack()
# T.pack()

# # Insert The Fact.
# T.insert(tk.END, Fact)

    root.mainloop()


if __name__ == "__main__":
    LaunchGUI()
